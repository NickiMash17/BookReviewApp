@model IEnumerable<BookReviewApp.Domain.Models.Book>

@{
    ViewData["Title"] = "Books Library";
}

<!-- Header Section -->
<div class="books-header text-center py-5 mb-5">
    <div class="container">
        <h1 class="display-4 fw-bold mb-3">
            <i class="bi bi-book-half text-primary"></i> Books Library
        </h1>
        <p class="lead text-muted mb-4">Discover amazing books from talented authors around the world</p>
        
        <!-- Search and Filter Bar -->
        <div class="search-filter-bar">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control border-start-0" 
                               placeholder="Search books by title, author, or description...">
                    </div>
                </div>
                <div class="col-md-2">
                    <select id="sortSelect" class="form-select">
                        <option value="title">Sort by Title</option>
                        <option value="author">Sort by Author</option>
                        <option value="date">Sort by Date</option>
                        <option value="rating">Sort by Rating</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <a asp-action="Create" class="btn btn-primary w-100">
                        <i class="bi bi-plus-circle"></i> Add Book
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Books Grid -->
<div class="container">
    @if (Model.Any())
    {
        <div class="row" id="booksGrid">
            @foreach (var book in Model)
            {
                <div class="col-lg-4 col-md-6 mb-4 book-item" 
                     data-title="@book.Title.ToLower()" 
                     data-author="@(book.Author?.Name?.ToLower() ?? "")" 
                     data-description="@(book.Description?.ToLower() ?? "")">
                    <div class="book-card h-100">
                        <div class="book-cover-wrapper">
                            <img src="@(book.CoverImageUrl ?? "/images/default-book.png")"
                                 class="img-fluid book-cover"
                                 alt="@book.Title"
                                 onerror="this.src='/images/default-book.png'" />
                            <div class="book-overlay">
                                <div class="overlay-buttons">
                                    <a asp-action="Details" asp-route-id="@book.BookId" 
                                       class="btn btn-light btn-sm me-2">
                                        <i class="bi bi-eye"></i> Details
                                    </a>
                                    <a asp-action="Create" asp-controller="Reviews" asp-route-bookId="@book.BookId" 
                                       class="btn btn-warning btn-sm">
                                        <i class="bi bi-star"></i> Review
                                    </a>
                                </div>
                            </div>
                        </div>
                        
                        <div class="book-content p-4">
                            <div class="book-header mb-3">
                                <h5 class="book-title mb-2">@book.Title</h5>
                                <p class="book-author text-muted mb-2">
                                    <i class="bi bi-person"></i> @(book.Author?.Name ?? "Unknown Author")
                                </p>
                                <div class="book-meta">
                                    <span class="badge bg-secondary me-2">
                                        <i class="bi bi-calendar"></i> @book.PublishedDate.ToString("yyyy")
                                    </span>
                                    <span class="badge bg-info">
                                        <i class="bi bi-currency-dollar"></i> @book.Price.ToString("F2")
                                    </span>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(book.Description))
                            {
                                <p class="book-description text-muted small mb-3">
                                    @(book.Description.Length > 120 ? book.Description.Substring(0, 120) + "..." : book.Description)
                                </p>
                            }
                            
                            <div class="book-actions d-flex justify-content-between align-items-center">
                                <div class="book-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="bi bi-star-fill text-warning"></i>
                                    }
                                    <span class="ms-1 text-muted small">(4.5)</span>
                                </div>
                                <div class="action-buttons">
                                    <a asp-action="Edit" asp-route-id="@book.BookId" 
                                       class="btn btn-outline-primary btn-sm me-1">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@book.BookId" 
                                       class="btn btn-outline-danger btn-sm"
                                       onclick="return confirm('Are you sure you want to delete this book?');">
                                        <i class="bi bi-trash"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- No Results Message -->
        <div id="noResults" class="text-center py-5" style="display: none;">
            <i class="bi bi-search" style="font-size: 4rem; color: #6c757d;"></i>
            <h3 class="mt-3 text-muted">No books found</h3>
            <p class="text-muted">Try adjusting your search criteria</p>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-book" style="font-size: 4rem; color: #6c757d;"></i>
            <h3 class="mt-3 text-muted">No Books Found</h3>
            <p class="text-muted">Get started by adding your first book to the library.</p>
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add First Book
            </a>
        </div>
    }
</div>

<style>
    .books-header {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 0 0 30px 30px;
    }
    
    .search-filter-bar {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .book-card {
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .book-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    
    .book-cover-wrapper {
        position: relative;
        overflow: hidden;
        height: 300px;
    }
    
    .book-cover {
        width: 100%;
        height: 300px;
        object-fit: cover;
        border-radius: 16px;
        box-shadow: 0 4px 24px rgba(0,0,0,0.12);
        transition: transform 0.2s, box-shadow 0.2s;
    }
    
    .book-card:hover .book-cover {
        transform: scale(1.04);
        box-shadow: 0 8px 32px rgba(0,0,0,0.18);
    }
    
    .book-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .book-card:hover .book-overlay {
        opacity: 1;
    }
    
    .overlay-buttons {
        display: flex;
        gap: 0.5rem;
    }
    
    .book-title {
        font-weight: bold;
        color: #333;
        line-height: 1.3;
    }
    
    .book-author {
        font-size: 0.9rem;
    }
    
    .book-meta {
        margin-top: 0.5rem;
    }
    
    .book-description {
        line-height: 1.5;
    }
    
    .book-actions {
        border-top: 1px solid #eee;
        padding-top: 1rem;
        margin-top: auto;
    }
    
    .book-rating {
        font-size: 0.8rem;
    }
    
    .action-buttons .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }
</style>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const bookItems = document.querySelectorAll('.book-item');
            let visibleCount = 0;
            
            bookItems.forEach(item => {
                const title = item.dataset.title;
                const author = item.dataset.author;
                const description = item.dataset.description;
                
                if (title.includes(searchTerm) || author.includes(searchTerm) || description.includes(searchTerm)) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            
            // Show/hide no results message
            const noResults = document.getElementById('noResults');
            if (visibleCount === 0 && searchTerm !== '') {
                noResults.style.display = 'block';
            } else {
                noResults.style.display = 'none';
            }
        });
        
        // Sort functionality
        document.getElementById('sortSelect').addEventListener('change', function() {
            const sortBy = this.value;
            const booksGrid = document.getElementById('booksGrid');
            const bookItems = Array.from(booksGrid.children);
            
            bookItems.sort((a, b) => {
                let aValue, bValue;
                
                switch(sortBy) {
                    case 'title':
                        aValue = a.querySelector('.book-title').textContent.toLowerCase();
                        bValue = b.querySelector('.book-title').textContent.toLowerCase();
                        break;
                    case 'author':
                        aValue = a.querySelector('.book-author').textContent.toLowerCase();
                        bValue = b.querySelector('.book-author').textContent.toLowerCase();
                        break;
                    case 'date':
                        aValue = a.querySelector('.badge').textContent;
                        bValue = b.querySelector('.badge').textContent;
                        break;
                    case 'rating':
                        aValue = parseFloat(a.querySelector('.book-rating span').textContent.match(/\d+\.\d+/)[0]);
                        bValue = parseFloat(b.querySelector('.book-rating span').textContent.match(/\d+\.\d+/)[0]);
                        break;
                    default:
                        return 0;
                }
                
                if (aValue < bValue) return -1;
                if (aValue > bValue) return 1;
                return 0;
            });
            
            // Re-append sorted items
            bookItems.forEach(item => booksGrid.appendChild(item));
        });
    </script>
}