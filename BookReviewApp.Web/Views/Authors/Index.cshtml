@model IEnumerable<BookReviewApp.Domain.Models.Author>

@{
    ViewData["Title"] = "Authors";
}

<!-- Header Section -->
<div class="authors-header text-center py-5 mb-5">
    <div class="container">
        <h1 class="display-4 fw-bold mb-3">
            <i class="bi bi-people text-success"></i> Authors
        </h1>
        <p class="lead text-muted mb-4">Discover talented authors and their literary masterpieces</p>
        
        <!-- Search and Filter Bar -->
        <div class="search-filter-bar">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control border-start-0" 
                               placeholder="Search authors by name or biography...">
                    </div>
                </div>
                <div class="col-md-2">
                    <select id="sortSelect" class="form-select">
                        <option value="name">Sort by Name</option>
                        <option value="books">Sort by Books</option>
                        <option value="birth">Sort by Birth Date</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <a asp-action="Create" class="btn btn-success w-100">
                        <i class="bi bi-plus-circle"></i> Add Author
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Authors Grid -->
<div class="container book-list">
    @if (Model.Any())
    {
        <div class="row" id="authorsGrid">
            @foreach (var author in Model)
            {
                <div class="col-lg-4 col-md-6 mb-4 author-item" 
                     data-name="@author.Name.ToLower()" 
                     data-biography="@(author.Biography?.ToLower() ?? "")">
                    <div class="author-card h-100">
                        <div class="author-photo-wrapper d-flex justify-content-center align-items-center" style="height: 250px;">
                            <img src="@(string.IsNullOrEmpty(author.PhotoUrl) ? "/images/placeholder.jpg" : author.PhotoUrl)" 
                                 class="author-photo fade-in" 
                                 alt="Photo of @author.Name"
                                 loading="lazy"
                                 onerror="this.onerror=null;this.src='/images/placeholder.jpg';" />
                            <div class="author-overlay">
                                <div class="overlay-buttons">
                                    <a asp-action="Details" asp-route-id="@author.AuthorId" 
                                       class="btn btn-light btn-sm me-2">
                                        <i class="bi bi-eye"></i> Details
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@author.AuthorId" 
                                       class="btn btn-warning btn-sm">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a>
                                </div>
                            </div>
                        </div>
                        
                        <div class="author-content p-4">
                            <div class="author-header mb-3">
                                <h5 class="author-name mb-2">@author.Name</h5>
                                @if (author.DateOfBirth != default)
                                {
                                    <p class="author-birth text-muted mb-2">
                                        <i class="bi bi-calendar"></i> Born: @author.DateOfBirth.ToString("MMMM d, yyyy")
                                    </p>
                                }
                                <div class="author-stats">
                                    <span class="badge bg-primary me-2">
                                        <i class="bi bi-book"></i> 5 Books
                                    </span>
                                    <span class="badge bg-success">
                                        <i class="bi bi-star"></i> 4.2 Rating
                                    </span>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(author.Biography))
                            {
                                <p class="author-bio text-muted small mb-3">
                                    @(author.Biography.Length > 120 ? author.Biography.Substring(0, 120) + "..." : author.Biography)
                                </p>
                            }
                            
                            <div class="author-actions d-flex justify-content-between align-items-center">
                                <div class="author-info">
                                    <small class="text-muted">
                                        <i class="bi bi-clock"></i> Added @author.CreatedAt.ToString("MMM yyyy")
                                    </small>
                                </div>
                                <div class="action-buttons">
                                    <a asp-action="Details" asp-route-id="@author.AuthorId" 
                                       class="btn btn-outline-primary btn-sm me-1">
                                        <i class="bi bi-eye"></i>
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@author.AuthorId" 
                                       class="btn btn-outline-warning btn-sm me-1">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@author.AuthorId" 
                                       class="btn btn-outline-danger btn-sm"
                                       onclick="return confirm('Are you sure you want to delete this author?');">
                                        <i class="bi bi-trash"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- No Results Message -->
        <div id="noResults" class="text-center py-5" style="display: none;">
            <i class="bi bi-search" style="font-size: 4rem; color: #6c757d;"></i>
            <h3 class="mt-3 text-muted">No authors found</h3>
            <p class="text-muted">Try adjusting your search criteria</p>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-people" style="font-size: 4rem; color: #6c757d;"></i>
            <h3 class="mt-3 text-muted">No Authors Found</h3>
            <p class="text-muted">Get started by adding your first author to the library.</p>
            <a asp-action="Create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Add First Author
            </a>
        </div>
    }
</div>

<style>
    .authors-header {
        background: linear-gradient(135deg, #d4fc79 0%, #96e6a1 100%);
        border-radius: 0 0 30px 30px;
    }
    
    .search-filter-bar {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .author-card {
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .author-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    
    .author-photo-wrapper {
        position: relative;
        overflow: hidden;
        height: 250px;
    }
    
    .author-photo {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 50%;
        box-shadow: 0 2px 12px rgba(0,0,0,0.10);
        border: 4px solid #fff;
        margin: 0 auto 1rem auto;
        display: block;
    }
    
    .author-card:hover .author-photo {
        box-shadow: 0 6px 24px rgba(0,0,0,0.18);
    }
    
    .author-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .author-card:hover .author-overlay {
        opacity: 1;
    }
    
    .overlay-buttons {
        display: flex;
        gap: 0.5rem;
    }
    
    .author-name {
        font-weight: bold;
        color: #333;
        line-height: 1.3;
    }
    
    .author-birth {
        font-size: 0.9rem;
    }
    
    .author-stats {
        margin-top: 0.5rem;
    }
    
    .author-bio {
        line-height: 1.5;
    }
    
    .author-actions {
        border-top: 1px solid #eee;
        padding-top: 1rem;
        margin-top: auto;
    }
    
    .action-buttons .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }
</style>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const authorItems = document.querySelectorAll('.author-item');
            let visibleCount = 0;
            authorItems.forEach(item => {
                const name = item.dataset.name;
                const biography = item.dataset.biography;
                if (name.includes(searchTerm) || biography.includes(searchTerm)) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            // Show/hide no results message
            const noResults = document.getElementById('noResults');
            if (visibleCount === 0 && searchTerm !== '') {
                noResults.style.display = 'block';
            } else {
                noResults.style.display = 'none';
            }
        });
        // Sort functionality
        document.getElementById('sortSelect').addEventListener('change', function() {
            const sortBy = this.value;
            const authorsGrid = document.getElementById('authorsGrid');
            const authorItems = Array.from(authorsGrid.children);
            authorItems.sort((a, b) => {
                let aValue, bValue;
                switch(sortBy) {
                    case 'name':
                        aValue = a.querySelector('.author-name').textContent.toLowerCase();
                        bValue = b.querySelector('.author-name').textContent.toLowerCase();
                        break;
                    case 'books':
                        aValue = parseInt(a.querySelector('.badge').textContent.match(/\d+/)[0]);
                        bValue = parseInt(b.querySelector('.badge').textContent.match(/\d+/)[0]);
                        break;
                    case 'birth':
                        aValue = a.querySelector('.author-birth')?.textContent || '';
                        bValue = b.querySelector('.author-birth')?.textContent || '';
                        break;
                    default:
                        return 0;
                }
                if (aValue < bValue) return -1;
                if (aValue > bValue) return 1;
                return 0;
            });
            // Re-append sorted items
            authorItems.forEach(item => authorsGrid.appendChild(item));
        });
    </script>
} 